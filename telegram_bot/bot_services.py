from telebot import types
from utils import (
    add_stage,
    reaction_to_prev_generate,
    reaction_to_prev_select,
    get_last_stage,
    add_toast_seen,
    select_tag_toasts,
    select_random_toasts,
    get_all_generated
)
import markovify
import re
from pathlib import Path
from typing import (
    Tuple,
    List,
    Any,
    Optional
)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
message_dir = Path(__file__).parent / 'messages'


def start_response(chat_id: int) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    add_stage(stage='start', chat_id=chat_id)

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    item1 = types.InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å!")
    item2 = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    markup.add(item1, item2)

    # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    with open(message_dir / 'start.txt', 'r', encoding='utf-8') as start_message:
        message = start_message.read()
    return message, markup


def main_menu(chat_id: int, help: Optional[bool] = True) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã help

    help: –µ—Å–ª–∏ True, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è help; –∏–Ω–∞—á–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    add_stage(stage='main menu', chat_id=chat_id)

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    item1 = types.InlineKeyboardButton("–í—ã–±–µ—Ä–∏ —Ç–æ—Å—Ç")
    item2 = types.InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ—Å—Ç")
    markup.add(item1, item2)

    message = "–í—ã–±—Ä–∞—Ç—å —Ç–æ—Å—Ç –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ?"

    # –ï—Å–ª–∏ —é–∑–µ—Ä—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–º–æ—â–∏
    if help:
        with open(message_dir / 'help.txt', 'r', encoding='utf-8') as help_message:
            message = help_message.read()
    return message, markup


def category_menu(stage_name: str, chat_id: int) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –º–µ–Ω—é "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Å—Ç" –∏ "–í—ã–±—Ä–∞—Ç—å —Ç–æ—Å—Ç"
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    add_stage(stage=stage_name, chat_id=chat_id)

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    item1 = types.InlineKeyboardButton("–†–∞–Ω–¥–æ–º–Ω—ã–π —Ç–æ—Å—Ç")
    item2 = types.InlineKeyboardButton("–¢–æ—Å—Ç –ø–æ —Ç–µ–≥–∞–º")
    item3 = types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")
    markup.add(item1, item2, item3)

    message = "–í–∞–º –Ω—É–∂–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–æ—Å—Ç –∏–ª–∏ —Ç–æ—Å—Ç –ø–æ —Ç–µ–≥–∞–º?"
    return message, markup


def gimme_tags(chat_id: int, stage_name: Optional[str] = None, update: Optional[bool] = False) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–≥–æ–≤

    stage_name - None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ –∫–æ–º–∞–Ω–¥–µ
    update - True, –µ—Å–ª–∏ —é–∑–µ—Ä –ø–µ—Ä–µ—à–µ–ª –ø–æ –∫–Ω–æ–ø–∫–µ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", –∏–Ω–∞—á–µ False
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    if not stage_name:
        stage_id = get_last_stage(chat_id, True)
        stage_id += -1 if update else 2  # –ü—Ä–û–∏–ó–û–®–µ–ª –•–∞–†–¥–ö–æ–î
        add_stage(stage_id=stage_id, chat_id=chat_id)
    else:
        add_stage(stage=stage_name, chat_id=chat_id)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardRemove()

    message = "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–≥–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, _—Ç–æ—Å—Ç-–ø—Ä–∏—Ç—á–∞_ –∏–ª–∏ _—Ç–æ—Å—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –±—Ä–∞—Ç–∞_"
    return message, markup


def get_markov(texts: List[str]) -> Any:
    """
    –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ú–∞—Ä–∫–æ–≤–∞
    """
    return markovify.Text(texts, state_size=3, retain_original=False)


def get_sentence_fit(model: Any, chat_id: int) -> str:
    """
    –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Å—Ç
    """
    gen_toast = model.make_sentence()
    all_generated = get_all_generated(chat_id=chat_id)

    # –ò—â–µ–º, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ, —á—Ç–æ —é–∑–µ—Ä –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª –∏ —á—Ç–æ –Ω–µ None
    while not gen_toast or gen_toast in all_generated:
        gen_toast = model.make_sentence()

    # –ï—Å–ª–∏ –ú–∞—Ä–∫–æ–≤ –≤–∑–¥—É–º–∞–µ—Ç –ø–∏—Å–∞—Ç—å —Å—Ç–∏—à–∫–∏
    gen_toast = re.sub('\s(?=[A-Z–ê-–Ø])', '\n', gen_toast)

    return gen_toast


def get_toast_markup(tags: Optional[bool] = False) -> Any:
    """
    –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å —Ç–æ—Å—Ç–∞–º–∏

    tags - True, –µ—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å —Ç–µ–≥–∞–º–∏
    """
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    item1 = types.InlineKeyboardButton("üëç")
    item2 = types.InlineKeyboardButton("üëé")
    item3 = types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")
    markup.add(item1, item2, item3)

    # –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Å —Ç–µ–≥–∞–º–∏, +1 –∫–Ω–æ–ø–∫–∞
    if tags:
        markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏"))

    return markup


def tag_not_found():
    """
    –ú–µ—Ç–æ–¥ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –¥–æ–ª–±–∞–Ω—É—Ç—ã–µ —Ç–µ–≥–∏
    """
    message = '–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–≥–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ—Å—Ç–∞ ‚òπÔ∏è'

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    item1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏")
    item2 = types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")
    markup.add(item1, item2)

    return message, markup


def random_generate(chat_id: int) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ç–æ—Å—Ç–∞
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    add_stage(stage='generate random', chat_id=chat_id)

    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ –≤—Å–µ–º –Ω–µ–¥–∏–∑–ª–∞–∫–∞–Ω–Ω—ã–º —Ç–æ—Å—Ç–∞–º
    model = get_markov(texts=select_random_toasts(chat_id, True))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–ø–µ—Ä —Ç–æ—Å—Ç
    gen_toast = get_sentence_fit(model=model, chat_id=chat_id)

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ—Å—Ç –≤ –ë–î
    add_toast_seen(chat_id=chat_id, gen_toast=gen_toast)

    return gen_toast, get_toast_markup()


def tags_generate(chat_id: int, message: Optional[str] = None) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Å—Ç–∞ –ø–æ —Ç–µ–≥–∞–º

    message - –Ω–µ None, –µ—Å–ª–∏ —é–∑–µ—Ä —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–∫–∞–∑–∞–ª —Ç–µ–≥–∏
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    add_stage(stage='generate random', chat_id=chat_id)

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—Å—Ç—ã –ø–æ —Ç–µ–≥–∞–º
    tag_toasts = select_tag_toasts(
        chat_id=chat_id, all_toasts=True, message=message)
    if not tag_toasts:
        return tag_not_found()

    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    tag_model = get_markov(texts=tag_toasts)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–ø–µ—Ä —Ç–æ—Å—Ç
    gen_toast = get_sentence_fit(model=tag_model, chat_id=chat_id)

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ—Å—Ç –≤ –ë–î
    add_toast_seen(chat_id=chat_id, gen_toast=gen_toast)

    return gen_toast, get_toast_markup(tags=True)


def random_select(chat_id: int) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ç–æ—Å—Ç–∞
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    add_stage(stage='select random', chat_id=chat_id)

    # –î–æ–±—ã–≤–∞–µ–º —Ç–æ—Å—Ç
    toast = select_random_toasts(chat_id=chat_id)

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ—Å—Ç –≤ –ë–î
    add_toast_seen(chat_id=chat_id, toast_id=int(toast[1]))

    return toast[0], get_toast_markup()


def tags_select(chat_id: int, message: Optional[str] = None) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Å—Ç–∞ –ø–æ —Ç–µ–≥–∞–º

    message - –Ω–µ None, –µ—Å–ª–∏ —é–∑–µ—Ä —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–∫–∞–∑–∞–ª —Ç–µ–≥–∏
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è —é–∑–µ—Ä–∞
    add_stage(stage='select tag', chat_id=chat_id)

    # –î–æ–±—ã–≤–∞–µ–º —Ç–æ—Å—Ç
    toast = select_tag_toasts(chat_id=chat_id, message=message)
    if not toast:
        return tag_not_found()

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ—Å—Ç –≤ –ë–î
    add_toast_seen(chat_id=chat_id, toast_id=int(toast[1]))
    return toast[0], get_toast_markup(True)


def toast_decider(chat_id: int, prev_reaction: Optional[bool] = True) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫. 
    –†–µ—à–∞–µ—Ç, –∫—É–¥–∞ –Ω–∞–º –∏–¥—Ç–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —é–∑–µ—Ä –∂–º–µ—Ç –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è —É –Ω–∞—Å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö)

    prev_reaction - –µ—Å–ª–∏ –Ω–∞–∂–∞–ª –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Å—Ç–∞–¥–∏—é) —é–∑–µ—Ä–∞
    stage_name = get_last_stage(chat_id=chat_id)

    # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—Å—ã–ª–∞–ª–∏ —Ç–æ—Å—Ç –∏–∑ –ë–î, –∏ —é–∑–µ—Ä—É –æ–Ω –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è
    if stage_name in ['select random', 'select tag'] and not prev_reaction:
        reaction_to_prev_select(chat_id=chat_id)

    # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—Å—ã–ª–∞–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Å—Ç, –∏ —é–∑–µ—Ä—É –æ–Ω –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è
    elif stage_name in ['generate random', 'generate_tag'] and prev_reaction:
        reaction_to_prev_generate(chat_id=chat_id)

    # –†–µ—à–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å
    if stage_name in ['select menu', 'select random']:
        return random_select(chat_id=chat_id)
    elif stage_name in ['generate menu', 'generate random']:
        return random_generate(chat_id=chat_id)
    elif stage_name == 'select tag':
        return tags_select(chat_id=chat_id)

    return tags_generate(chat_id=chat_id)


def text_decider(chat_id: int, message: str) -> Tuple[str, Any]:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Å—Ç–∞–¥–∏—é) —é–∑–µ—Ä–∞
    stage_name = get_last_stage(chat_id=chat_id)
    if stage_name == 'select tag choose':
        message, markup = tags_select(chat_id=chat_id, message=message)
    elif stage_name == 'generate tag choose':
        message, markup = tags_generate(chat_id=chat_id, message=message)
    
    # –ï—Å–ª–∏ —é–∑–µ—Ä —Ä–µ—à–∏–ª –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –∞ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç
    else:
        # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        item1 = types.InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å")
        item2 = types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")
        markup.add(item1, item2)

        # –ë–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–ø–æ–Ω–∏–º—É–ª–µ–∫
        with open(message_dir / 'not_understood.txt', 'r', encoding='utf-8') as not_understand_message:
            message = not_understand_message.read()
    
    return message, markup
